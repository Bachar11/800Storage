(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@sreyaj/ng-shimmer', ['exports', '@angular/core', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.sreyaj = global.sreyaj || {}, global.sreyaj['ng-shimmer'] = {}), global.ng.core, global.ng.common));
}(this, (function (exports, core, common) { 'use strict';

    exports.ShimmerTypes = void 0;
    (function (ShimmerTypes) {
        ShimmerTypes["LINE"] = "line";
        ShimmerTypes["SQUARE"] = "square";
        ShimmerTypes["CIRCLE"] = "circle";
    })(exports.ShimmerTypes || (exports.ShimmerTypes = {}));

    var SHIMMER_OPTIONS = new core.InjectionToken('Default config for shimmer', {
        factory: function () {
            return {
                width: '100%',
                height: '16px',
                borderRadius: '8px',
                colors: {
                    background: '#edeef1',
                    1: '#edeef1',
                    2: '#f6f7f8',
                    3: '#f4f4f4',
                    4: '#edeef1',
                },
                duration: '1s',
            };
        },
    });

    var ShimmerComponent = /** @class */ (function () {
        function ShimmerComponent(defaultOptions) {
            this.defaultOptions = defaultOptions;
            this.type = exports.ShimmerTypes.LINE;
            this.width = this.defaultOptions.width;
            this.height = this.defaultOptions.height;
            this.duration = this.defaultOptions.duration;
            this.rounded = false;
            this.borderRadius = null;
            this.class = 'shimmer-loader';
        }
        Object.defineProperty(ShimmerComponent.prototype, "heightValue", {
            get: function () {
                if ([exports.ShimmerTypes.CIRCLE, exports.ShimmerTypes.SQUARE].includes(this.type)) {
                    return this.width;
                }
                else {
                    return this.height;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ShimmerComponent.prototype, "borderRadiusValue", {
            get: function () {
                if (this.borderRadius) {
                    return this.borderRadius;
                }
                if (this.rounded) {
                    return this.defaultOptions.borderRadius;
                }
                switch (this.type) {
                    case exports.ShimmerTypes.CIRCLE:
                        return '50%';
                    case exports.ShimmerTypes.SQUARE:
                        return '0px';
                    default:
                        return '0px';
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ShimmerComponent.prototype, "bgColor", {
            get: function () {
                return this.defaultOptions.colors.background;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ShimmerComponent.prototype, "shimmerColorOne", {
            get: function () {
                return this.defaultOptions.colors['1'];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ShimmerComponent.prototype, "shimmerColorTwo", {
            get: function () {
                return this.defaultOptions.colors['2'];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ShimmerComponent.prototype, "shimmerColorThree", {
            get: function () {
                return this.defaultOptions.colors['3'];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ShimmerComponent.prototype, "shimmerColorFour", {
            get: function () {
                return this.defaultOptions.colors['4'];
            },
            enumerable: false,
            configurable: true
        });
        return ShimmerComponent;
    }());
    ShimmerComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'shimmer',
                    template: "",
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    styles: ["\n      :host {\n        background: var(--shimmer-bg);\n        background-image: linear-gradient(\n          to right,\n          var(--shimmer-color-1) 0%,\n          var(--shimmer-color-2) 20%,\n          var(--shimmer-color-3) 40%,\n          var(--shimmer-color-4) 100%\n        );\n        background-repeat: no-repeat;\n        background-size: 1000px 1000px;\n        display: inline-block;\n        position: relative;\n        animation-duration: var(--duration);\n        animation-fill-mode: forwards;\n        animation-iteration-count: infinite;\n        animation-name: shimmerAnimation;\n        animation-timing-function: linear;\n        -webkit-animation-duration: var(--duration);\n        -webkit-animation-fill-mode: forwards;\n        -webkit-animation-iteration-count: infinite;\n        -webkit-animation-name: shimmerAnimation;\n        -webkit-animation-timing-function: linear;\n      }\n\n      @keyframes shimmerAnimation {\n        0% {\n          background-position: -800px 0;\n        }\n\n        100% {\n          background-position: 800px 0;\n        }\n      }\n      @-webkit-keyframes shimmerAnimation {\n        0% {\n          background-position: -800px 0;\n        }\n\n        100% {\n          background-position: 800px 0;\n        }\n      }\n    "]
                },] }
    ];
    ShimmerComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: core.Inject, args: [SHIMMER_OPTIONS,] }] }
    ]; };
    ShimmerComponent.propDecorators = {
        type: [{ type: core.Input }],
        width: [{ type: core.HostBinding, args: ['style.width',] }, { type: core.Input }],
        heightValue: [{ type: core.HostBinding, args: ['style.height',] }],
        borderRadiusValue: [{ type: core.HostBinding, args: ['style.border-radius',] }],
        height: [{ type: core.Input }],
        duration: [{ type: core.HostBinding, args: ['style.--duration',] }, { type: core.Input }],
        rounded: [{ type: core.Input }],
        borderRadius: [{ type: core.Input }],
        class: [{ type: core.HostBinding, args: ['class',] }],
        bgColor: [{ type: core.HostBinding, args: ['style.--shimmer-bg',] }],
        shimmerColorOne: [{ type: core.HostBinding, args: ['style.--shimmer-color-1',] }],
        shimmerColorTwo: [{ type: core.HostBinding, args: ['style.--shimmer-color-2',] }],
        shimmerColorThree: [{ type: core.HostBinding, args: ['style.--shimmer-color-3',] }],
        shimmerColorFour: [{ type: core.HostBinding, args: ['style.--shimmer-color-4',] }]
    };

    var ShimmerModule = /** @class */ (function () {
        function ShimmerModule() {
        }
        return ShimmerModule;
    }());
    ShimmerModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [ShimmerComponent],
                    imports: [common.CommonModule],
                    exports: [ShimmerComponent],
                },] }
    ];

    /*
     * Public API Surface of ng-shimmer
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.SHIMMER_OPTIONS = SHIMMER_OPTIONS;
    exports.ShimmerComponent = ShimmerComponent;
    exports.ShimmerModule = ShimmerModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=sreyaj-ng-shimmer.umd.js.map
