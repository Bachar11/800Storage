import { InjectionToken, Component, ChangeDetectionStrategy, Inject, Input, HostBinding, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

var ShimmerTypes;
(function (ShimmerTypes) {
    ShimmerTypes["LINE"] = "line";
    ShimmerTypes["SQUARE"] = "square";
    ShimmerTypes["CIRCLE"] = "circle";
})(ShimmerTypes || (ShimmerTypes = {}));

const SHIMMER_OPTIONS = new InjectionToken('Default config for shimmer', {
    factory: () => {
        return {
            width: '100%',
            height: '16px',
            borderRadius: '8px',
            colors: {
                background: '#edeef1',
                1: '#edeef1',
                2: '#f6f7f8',
                3: '#f4f4f4',
                4: '#edeef1',
            },
            duration: '1s',
        };
    },
});

class ShimmerComponent {
    constructor(defaultOptions) {
        this.defaultOptions = defaultOptions;
        this.type = ShimmerTypes.LINE;
        this.width = this.defaultOptions.width;
        this.height = this.defaultOptions.height;
        this.duration = this.defaultOptions.duration;
        this.rounded = false;
        this.borderRadius = null;
        this.class = 'shimmer-loader';
    }
    get heightValue() {
        if ([ShimmerTypes.CIRCLE, ShimmerTypes.SQUARE].includes(this.type)) {
            return this.width;
        }
        else {
            return this.height;
        }
    }
    get borderRadiusValue() {
        if (this.borderRadius) {
            return this.borderRadius;
        }
        if (this.rounded) {
            return this.defaultOptions.borderRadius;
        }
        switch (this.type) {
            case ShimmerTypes.CIRCLE:
                return '50%';
            case ShimmerTypes.SQUARE:
                return '0px';
            default:
                return '0px';
        }
    }
    get bgColor() {
        return this.defaultOptions.colors.background;
    }
    get shimmerColorOne() {
        return this.defaultOptions.colors['1'];
    }
    get shimmerColorTwo() {
        return this.defaultOptions.colors['2'];
    }
    get shimmerColorThree() {
        return this.defaultOptions.colors['3'];
    }
    get shimmerColorFour() {
        return this.defaultOptions.colors['4'];
    }
}
ShimmerComponent.decorators = [
    { type: Component, args: [{
                selector: 'shimmer',
                template: ``,
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [`
      :host {
        background: var(--shimmer-bg);
        background-image: linear-gradient(
          to right,
          var(--shimmer-color-1) 0%,
          var(--shimmer-color-2) 20%,
          var(--shimmer-color-3) 40%,
          var(--shimmer-color-4) 100%
        );
        background-repeat: no-repeat;
        background-size: 1000px 1000px;
        display: inline-block;
        position: relative;
        animation-duration: var(--duration);
        animation-fill-mode: forwards;
        animation-iteration-count: infinite;
        animation-name: shimmerAnimation;
        animation-timing-function: linear;
        -webkit-animation-duration: var(--duration);
        -webkit-animation-fill-mode: forwards;
        -webkit-animation-iteration-count: infinite;
        -webkit-animation-name: shimmerAnimation;
        -webkit-animation-timing-function: linear;
      }

      @keyframes shimmerAnimation {
        0% {
          background-position: -800px 0;
        }

        100% {
          background-position: 800px 0;
        }
      }
      @-webkit-keyframes shimmerAnimation {
        0% {
          background-position: -800px 0;
        }

        100% {
          background-position: 800px 0;
        }
      }
    `]
            },] }
];
ShimmerComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [SHIMMER_OPTIONS,] }] }
];
ShimmerComponent.propDecorators = {
    type: [{ type: Input }],
    width: [{ type: HostBinding, args: ['style.width',] }, { type: Input }],
    heightValue: [{ type: HostBinding, args: ['style.height',] }],
    borderRadiusValue: [{ type: HostBinding, args: ['style.border-radius',] }],
    height: [{ type: Input }],
    duration: [{ type: HostBinding, args: ['style.--duration',] }, { type: Input }],
    rounded: [{ type: Input }],
    borderRadius: [{ type: Input }],
    class: [{ type: HostBinding, args: ['class',] }],
    bgColor: [{ type: HostBinding, args: ['style.--shimmer-bg',] }],
    shimmerColorOne: [{ type: HostBinding, args: ['style.--shimmer-color-1',] }],
    shimmerColorTwo: [{ type: HostBinding, args: ['style.--shimmer-color-2',] }],
    shimmerColorThree: [{ type: HostBinding, args: ['style.--shimmer-color-3',] }],
    shimmerColorFour: [{ type: HostBinding, args: ['style.--shimmer-color-4',] }]
};

class ShimmerModule {
}
ShimmerModule.decorators = [
    { type: NgModule, args: [{
                declarations: [ShimmerComponent],
                imports: [CommonModule],
                exports: [ShimmerComponent],
            },] }
];

/*
 * Public API Surface of ng-shimmer
 */

/**
 * Generated bundle index. Do not edit.
 */

export { SHIMMER_OPTIONS, ShimmerComponent, ShimmerModule, ShimmerTypes };
//# sourceMappingURL=sreyaj-ng-shimmer.js.map
