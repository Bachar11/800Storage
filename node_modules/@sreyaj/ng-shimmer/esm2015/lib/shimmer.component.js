import { ChangeDetectionStrategy, Component, HostBinding, Inject, Input, } from '@angular/core';
import { ShimmerTypes } from './shimmer.model';
import { SHIMMER_OPTIONS } from './shimmer.token';
export class ShimmerComponent {
    constructor(defaultOptions) {
        this.defaultOptions = defaultOptions;
        this.type = ShimmerTypes.LINE;
        this.width = this.defaultOptions.width;
        this.height = this.defaultOptions.height;
        this.duration = this.defaultOptions.duration;
        this.rounded = false;
        this.borderRadius = null;
        this.class = 'shimmer-loader';
    }
    get heightValue() {
        if ([ShimmerTypes.CIRCLE, ShimmerTypes.SQUARE].includes(this.type)) {
            return this.width;
        }
        else {
            return this.height;
        }
    }
    get borderRadiusValue() {
        if (this.borderRadius) {
            return this.borderRadius;
        }
        if (this.rounded) {
            return this.defaultOptions.borderRadius;
        }
        switch (this.type) {
            case ShimmerTypes.CIRCLE:
                return '50%';
            case ShimmerTypes.SQUARE:
                return '0px';
            default:
                return '0px';
        }
    }
    get bgColor() {
        return this.defaultOptions.colors.background;
    }
    get shimmerColorOne() {
        return this.defaultOptions.colors['1'];
    }
    get shimmerColorTwo() {
        return this.defaultOptions.colors['2'];
    }
    get shimmerColorThree() {
        return this.defaultOptions.colors['3'];
    }
    get shimmerColorFour() {
        return this.defaultOptions.colors['4'];
    }
}
ShimmerComponent.decorators = [
    { type: Component, args: [{
                selector: 'shimmer',
                template: ``,
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [`
      :host {
        background: var(--shimmer-bg);
        background-image: linear-gradient(
          to right,
          var(--shimmer-color-1) 0%,
          var(--shimmer-color-2) 20%,
          var(--shimmer-color-3) 40%,
          var(--shimmer-color-4) 100%
        );
        background-repeat: no-repeat;
        background-size: 1000px 1000px;
        display: inline-block;
        position: relative;
        animation-duration: var(--duration);
        animation-fill-mode: forwards;
        animation-iteration-count: infinite;
        animation-name: shimmerAnimation;
        animation-timing-function: linear;
        -webkit-animation-duration: var(--duration);
        -webkit-animation-fill-mode: forwards;
        -webkit-animation-iteration-count: infinite;
        -webkit-animation-name: shimmerAnimation;
        -webkit-animation-timing-function: linear;
      }

      @keyframes shimmerAnimation {
        0% {
          background-position: -800px 0;
        }

        100% {
          background-position: 800px 0;
        }
      }
      @-webkit-keyframes shimmerAnimation {
        0% {
          background-position: -800px 0;
        }

        100% {
          background-position: 800px 0;
        }
      }
    `]
            },] }
];
ShimmerComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [SHIMMER_OPTIONS,] }] }
];
ShimmerComponent.propDecorators = {
    type: [{ type: Input }],
    width: [{ type: HostBinding, args: ['style.width',] }, { type: Input }],
    heightValue: [{ type: HostBinding, args: ['style.height',] }],
    borderRadiusValue: [{ type: HostBinding, args: ['style.border-radius',] }],
    height: [{ type: Input }],
    duration: [{ type: HostBinding, args: ['style.--duration',] }, { type: Input }],
    rounded: [{ type: Input }],
    borderRadius: [{ type: Input }],
    class: [{ type: HostBinding, args: ['class',] }],
    bgColor: [{ type: HostBinding, args: ['style.--shimmer-bg',] }],
    shimmerColorOne: [{ type: HostBinding, args: ['style.--shimmer-color-1',] }],
    shimmerColorTwo: [{ type: HostBinding, args: ['style.--shimmer-color-2',] }],
    shimmerColorThree: [{ type: HostBinding, args: ['style.--shimmer-color-3',] }],
    shimmerColorFour: [{ type: HostBinding, args: ['style.--shimmer-color-4',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hpbW1lci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1zaGltbWVyL3NyYy9saWIvc2hpbW1lci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsV0FBVyxFQUNYLE1BQU0sRUFDTixLQUFLLEdBQ04sTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFrQixZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFzRGxELE1BQU0sT0FBTyxnQkFBZ0I7SUFDM0IsWUFDbUMsY0FBOEI7UUFBOUIsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBR3hELFNBQUksR0FBaUIsWUFBWSxDQUFDLElBQUksQ0FBQztRQUloRCxVQUFLLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUM7UUE4QmxDLFdBQU0sR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQztRQUlwQyxhQUFRLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUM7UUFFL0IsWUFBTyxHQUFHLEtBQUssQ0FBQztRQUVoQixpQkFBWSxHQUFrQixJQUFJLENBQUM7UUFHNUMsVUFBSyxHQUFHLGdCQUFnQixDQUFDO0lBL0N0QixDQUFDO0lBUUosSUFDSSxXQUFXO1FBQ2IsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDbEUsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO1NBQ25CO2FBQU07WUFDTCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7U0FDcEI7SUFDSCxDQUFDO0lBRUQsSUFDSSxpQkFBaUI7UUFDbkIsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3JCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztTQUMxQjtRQUNELElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDO1NBQ3pDO1FBQ0QsUUFBUSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ2pCLEtBQUssWUFBWSxDQUFDLE1BQU07Z0JBQ3RCLE9BQU8sS0FBSyxDQUFDO1lBQ2YsS0FBSyxZQUFZLENBQUMsTUFBTTtnQkFDdEIsT0FBTyxLQUFLLENBQUM7WUFDZjtnQkFDRSxPQUFPLEtBQUssQ0FBQztTQUNoQjtJQUNILENBQUM7SUFnQkQsSUFDSSxPQUFPO1FBQ1QsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUM7SUFDL0MsQ0FBQztJQUNELElBQ0ksZUFBZTtRQUNqQixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFDRCxJQUNJLGVBQWU7UUFDakIsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBQ0QsSUFDSSxpQkFBaUI7UUFDbkIsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBQ0QsSUFDSSxnQkFBZ0I7UUFDbEIsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN6QyxDQUFDOzs7WUEzSEYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxTQUFTO2dCQUNuQixRQUFRLEVBQUUsRUFBRTtnQkFnRFosZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07eUJBOUM3Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0E0Q0M7YUFHSjs7OzRDQUdJLE1BQU0sU0FBQyxlQUFlOzs7bUJBR3hCLEtBQUs7b0JBRUwsV0FBVyxTQUFDLGFBQWEsY0FDekIsS0FBSzswQkFHTCxXQUFXLFNBQUMsY0FBYztnQ0FTMUIsV0FBVyxTQUFDLHFCQUFxQjtxQkFrQmpDLEtBQUs7dUJBR0wsV0FBVyxTQUFDLGtCQUFrQixjQUM5QixLQUFLO3NCQUdMLEtBQUs7MkJBRUwsS0FBSztvQkFFTCxXQUFXLFNBQUMsT0FBTztzQkFHbkIsV0FBVyxTQUFDLG9CQUFvQjs4QkFJaEMsV0FBVyxTQUFDLHlCQUF5Qjs4QkFJckMsV0FBVyxTQUFDLHlCQUF5QjtnQ0FJckMsV0FBVyxTQUFDLHlCQUF5QjsrQkFJckMsV0FBVyxTQUFDLHlCQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDb21wb25lbnQsXG4gIEhvc3RCaW5kaW5nLFxuICBJbmplY3QsXG4gIElucHV0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFNoaW1tZXJPcHRpb25zLCBTaGltbWVyVHlwZXMgfSBmcm9tICcuL3NoaW1tZXIubW9kZWwnO1xuaW1wb3J0IHsgU0hJTU1FUl9PUFRJT05TIH0gZnJvbSAnLi9zaGltbWVyLnRva2VuJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnc2hpbW1lcicsXG4gIHRlbXBsYXRlOiBgYCxcbiAgc3R5bGVzOiBbXG4gICAgYFxuICAgICAgOmhvc3Qge1xuICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1zaGltbWVyLWJnKTtcbiAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KFxuICAgICAgICAgIHRvIHJpZ2h0LFxuICAgICAgICAgIHZhcigtLXNoaW1tZXItY29sb3ItMSkgMCUsXG4gICAgICAgICAgdmFyKC0tc2hpbW1lci1jb2xvci0yKSAyMCUsXG4gICAgICAgICAgdmFyKC0tc2hpbW1lci1jb2xvci0zKSA0MCUsXG4gICAgICAgICAgdmFyKC0tc2hpbW1lci1jb2xvci00KSAxMDAlXG4gICAgICAgICk7XG4gICAgICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XG4gICAgICAgIGJhY2tncm91bmQtc2l6ZTogMTAwMHB4IDEwMDBweDtcbiAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogdmFyKC0tZHVyYXRpb24pO1xuICAgICAgICBhbmltYXRpb24tZmlsbC1tb2RlOiBmb3J3YXJkcztcbiAgICAgICAgYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogaW5maW5pdGU7XG4gICAgICAgIGFuaW1hdGlvbi1uYW1lOiBzaGltbWVyQW5pbWF0aW9uO1xuICAgICAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBsaW5lYXI7XG4gICAgICAgIC13ZWJraXQtYW5pbWF0aW9uLWR1cmF0aW9uOiB2YXIoLS1kdXJhdGlvbik7XG4gICAgICAgIC13ZWJraXQtYW5pbWF0aW9uLWZpbGwtbW9kZTogZm9yd2FyZHM7XG4gICAgICAgIC13ZWJraXQtYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogaW5maW5pdGU7XG4gICAgICAgIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IHNoaW1tZXJBbmltYXRpb247XG4gICAgICAgIC13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogbGluZWFyO1xuICAgICAgfVxuXG4gICAgICBAa2V5ZnJhbWVzIHNoaW1tZXJBbmltYXRpb24ge1xuICAgICAgICAwJSB7XG4gICAgICAgICAgYmFja2dyb3VuZC1wb3NpdGlvbjogLTgwMHB4IDA7XG4gICAgICAgIH1cblxuICAgICAgICAxMDAlIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiA4MDBweCAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBALXdlYmtpdC1rZXlmcmFtZXMgc2hpbW1lckFuaW1hdGlvbiB7XG4gICAgICAgIDAlIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAtODAwcHggMDtcbiAgICAgICAgfVxuXG4gICAgICAgIDEwMCUge1xuICAgICAgICAgIGJhY2tncm91bmQtcG9zaXRpb246IDgwMHB4IDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBgLFxuICBdLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgU2hpbW1lckNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoU0hJTU1FUl9PUFRJT05TKSBwcml2YXRlIGRlZmF1bHRPcHRpb25zOiBTaGltbWVyT3B0aW9uc1xuICApIHt9XG5cbiAgQElucHV0KCkgdHlwZTogU2hpbW1lclR5cGVzID0gU2hpbW1lclR5cGVzLkxJTkU7XG5cbiAgQEhvc3RCaW5kaW5nKCdzdHlsZS53aWR0aCcpXG4gIEBJbnB1dCgpXG4gIHdpZHRoID0gdGhpcy5kZWZhdWx0T3B0aW9ucy53aWR0aDtcblxuICBASG9zdEJpbmRpbmcoJ3N0eWxlLmhlaWdodCcpXG4gIGdldCBoZWlnaHRWYWx1ZSgpIHtcbiAgICBpZiAoW1NoaW1tZXJUeXBlcy5DSVJDTEUsIFNoaW1tZXJUeXBlcy5TUVVBUkVdLmluY2x1ZGVzKHRoaXMudHlwZSkpIHtcbiAgICAgIHJldHVybiB0aGlzLndpZHRoO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5oZWlnaHQ7XG4gICAgfVxuICB9XG5cbiAgQEhvc3RCaW5kaW5nKCdzdHlsZS5ib3JkZXItcmFkaXVzJylcbiAgZ2V0IGJvcmRlclJhZGl1c1ZhbHVlKCkge1xuICAgIGlmICh0aGlzLmJvcmRlclJhZGl1cykge1xuICAgICAgcmV0dXJuIHRoaXMuYm9yZGVyUmFkaXVzO1xuICAgIH1cbiAgICBpZiAodGhpcy5yb3VuZGVkKSB7XG4gICAgICByZXR1cm4gdGhpcy5kZWZhdWx0T3B0aW9ucy5ib3JkZXJSYWRpdXM7XG4gICAgfVxuICAgIHN3aXRjaCAodGhpcy50eXBlKSB7XG4gICAgICBjYXNlIFNoaW1tZXJUeXBlcy5DSVJDTEU6XG4gICAgICAgIHJldHVybiAnNTAlJztcbiAgICAgIGNhc2UgU2hpbW1lclR5cGVzLlNRVUFSRTpcbiAgICAgICAgcmV0dXJuICcwcHgnO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuICcwcHgnO1xuICAgIH1cbiAgfVxuXG4gIEBJbnB1dCgpXG4gIGhlaWdodCA9IHRoaXMuZGVmYXVsdE9wdGlvbnMuaGVpZ2h0O1xuXG4gIEBIb3N0QmluZGluZygnc3R5bGUuLS1kdXJhdGlvbicpXG4gIEBJbnB1dCgpXG4gIGR1cmF0aW9uID0gdGhpcy5kZWZhdWx0T3B0aW9ucy5kdXJhdGlvbjtcblxuICBASW5wdXQoKSByb3VuZGVkID0gZmFsc2U7XG5cbiAgQElucHV0KCkgYm9yZGVyUmFkaXVzOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzJylcbiAgY2xhc3MgPSAnc2hpbW1lci1sb2FkZXInO1xuXG4gIEBIb3N0QmluZGluZygnc3R5bGUuLS1zaGltbWVyLWJnJylcbiAgZ2V0IGJnQ29sb3IoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGVmYXVsdE9wdGlvbnMuY29sb3JzLmJhY2tncm91bmQ7XG4gIH1cbiAgQEhvc3RCaW5kaW5nKCdzdHlsZS4tLXNoaW1tZXItY29sb3ItMScpXG4gIGdldCBzaGltbWVyQ29sb3JPbmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGVmYXVsdE9wdGlvbnMuY29sb3JzWycxJ107XG4gIH1cbiAgQEhvc3RCaW5kaW5nKCdzdHlsZS4tLXNoaW1tZXItY29sb3ItMicpXG4gIGdldCBzaGltbWVyQ29sb3JUd28oKSB7XG4gICAgcmV0dXJuIHRoaXMuZGVmYXVsdE9wdGlvbnMuY29sb3JzWycyJ107XG4gIH1cbiAgQEhvc3RCaW5kaW5nKCdzdHlsZS4tLXNoaW1tZXItY29sb3ItMycpXG4gIGdldCBzaGltbWVyQ29sb3JUaHJlZSgpIHtcbiAgICByZXR1cm4gdGhpcy5kZWZhdWx0T3B0aW9ucy5jb2xvcnNbJzMnXTtcbiAgfVxuICBASG9zdEJpbmRpbmcoJ3N0eWxlLi0tc2hpbW1lci1jb2xvci00JylcbiAgZ2V0IHNoaW1tZXJDb2xvckZvdXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGVmYXVsdE9wdGlvbnMuY29sb3JzWyc0J107XG4gIH1cbn1cbiJdfQ==